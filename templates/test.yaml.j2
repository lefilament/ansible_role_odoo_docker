version: "2.1"
services:
    odoo:
        build:
            context: ./odoo
        image: filament/odoo:{{ item.image_version }}test
        container_name: {{ item.dir }}
        depends_on:
            - db
            - smtp
        environment:
            PGDATABASE: "{{ item.db }}"
{% if odoo_extra_host is defined %}
        extra_hosts:
            - "{{ odoo_extra_host }}"
{% endif %}
        tty: true
        volumes:
            - filestore:/opt/odoo/data:z
{% if private_pull is defined %}
            - ../import/:/import/:ro
{% endif %}
        networks:
            default:
            inverseproxy_shared:
{% if restrict_internet_access %}
{% if whitelisted_urls is defined %}
            whitelists_proxy:
{% endif %}
{% if item.extra_urls is defined %}
            extrawhitelists_proxy:
{% endif %}
{% endif %}
        restart: unless-stopped
        labels:
            co.elastic.logs/enabled: "false"
            traefik.enable: "true"
{% if ansible_processor_vcpus > 2 or item.force_odoo_workers is defined %}
            traefik.http.routers.{{ item.dir }}-longpolling.rule: "Host(`{{ item.url }}`) && PathPrefix(`/longpolling/`)"
            traefik.http.routers.{{ item.dir }}-longpolling.service: "{{ item.dir }}-longpolling"
            traefik.http.services.{{ item.dir }}-longpolling.loadbalancer.server.port: "8072"
{% endif %}
            traefik.http.routers.{{ item.dir }}-restrict.middlewares: "auth@file"
            traefik.http.routers.{{ item.dir }}-restrict.rule: "Host(`{{ item.url }}`) && Path(`/website/info`, `/web/database/{p:manager|create|duplicate|drop|backup|restore|change_password}`)"
            traefik.http.routers.{{ item.dir }}-restrict.service: "{{ item.dir }}"
            traefik.http.routers.{{ item.dir }}.middlewares: "norobot-headers@file"
            traefik.http.routers.{{ item.dir }}.rule: "Host(`{{ item.url }}`)"
            traefik.http.routers.{{ item.dir }}.service: "{{ item.dir }}"
            traefik.http.services.{{ item.dir }}.loadbalancer.server.port: "8069"
        command:
            - odoo
            - --smtp-port=1025
            - --database={{ item.db }}
            - --init=web_environment_ribbon
{% if ansible_processor_vcpus > 2 or item.force_odoo_workers is defined %}
            - --workers=2
            - --max-cron-threads=1
{% elif odoo_prod.force_odoo_workers is defined %}
            - --workers=0
{% endif %}

    db:
        image: postgres:{{ odoo_db_version }}-alpine
        container_name: {{ item.dir }}_db
        environment:
            POSTGRES_DB: "postgres"
{% if odoo_prod is defined %}
            POSTGRES_USER: "{{ odoo_prod.db_user }}"
            POSTGRES_PASSWORD: "{{ odoo_prod.db_pass }}"
{% else %}
            POSTGRES_USER: "{{ item.db_user }}"
            POSTGRES_PASSWORD: "{{ item.db_pass }}"
{% endif %}
        labels:
            co.elastic.logs/enabled: "false"
        volumes:
            - db:/var/lib/postgresql/data:z
        restart: unless-stopped

    smtp:
        image: mailhog/mailhog
        container_name: {{ item.dir }}_smtp
        restart: unless-stopped
        networks:
            default:
            inverseproxy_smtp:
        labels:
            co.elastic.logs/enabled: "false"
            traefik.docker.network: "inverseproxy_smtp"
            traefik.enable: "true"
            traefik.http.routers.{{ item.dir }}smtp.middlewares: "auth@file, smtp-stripprefix@file"
            traefik.http.routers.{{ item.dir }}smtp.rule: "Host(`{{ item.url }}`) && PathPrefix(`/smtp/`)"
            traefik.http.routers.{{ item.dir }}smtp.service: "{{ item.dir }}smtp"
            traefik.http.services.{{ item.dir }}smtp.loadbalancer.server.port: "8025"
{% if restrict_internet_access and item.extra_urls is defined %}
{% for url in item.extra_urls %}

    {{ url }}:
        image: tecnativa/whitelist
        container_name: {{ item.dir }}_{{ url }}
        labels:
            co.elastic.logs/enabled: "false"
        networks:
            extrawhitelists_proxy:
                aliases:
                    - "{{ url }}"
            extrawhitelists_public:
        environment:
            PORT: "443"
            TARGET: "{{ url }}"
            PRE_RESOLVE: 1
        restart: unless-stopped
{% endfor %}
{% endif %}
{% if item.extra_app is defined %}

    app:
        image: {{ item.extra_app.image }}
        container_name: {{ item.extra_app.name }}
        restart: unless-stopped
        networks:
            inverseproxy_app:
        labels:
            co.elastic.logs/enabled: "false"
            traefik.docker.network: "inverseproxy_app"
            traefik.enable: "true"
            traefik.http.routers.{{ item.extra_app.name | lower | regex_replace('_','') }}.rule: "Host(`{{ item.extra_app.url }}`)"
            traefik.http.routers.{{ item.extra_app.name | lower | regex_replace('_','') }}.service: "{{ item.extra_app.name | lower | regex_replace('_','') }}"
            traefik.http.services.{{ item.extra_app.name | lower | regex_replace('_','') }}.loadbalancer.server.port: "80"
{% endif %}

networks:
    default:
        internal: true
        driver_opts:
            encrypted: 1
    inverseproxy_shared:
        external: true
    inverseproxy_smtp:
        external: true
{% if item.extra_app is defined %}
    inverseproxy_app:
        external: true
{% endif %}
{% if restrict_internet_access %}
{% if whitelisted_urls is defined %}
    whitelists_proxy:
        external: true
{% endif %}
{% if item.extra_urls is defined %}
    extrawhitelists_proxy:
        driver_opts:
            encrypted: 1
        internal: true
    extrawhitelists_public:
        driver_opts:
            encrypted: 1
{% endif %}
{% endif %}

volumes:
    filestore:
    db:
