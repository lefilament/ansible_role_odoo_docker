version: "2.1"
services:
    odoo:
{% if odoo_nonprod_instances is not defined %}
        build:
            context: ./odoo
{% endif %}
        image: filament/odoo:{{ odoo_version }}
        container_name: odoo
        depends_on:
            - db
            - smtp
        environment:
            PGDATABASE: "{{ odoo_prod.db }}"
{% if odoo_extra_host is defined %}
        extra_hosts:
            - "{{ odoo_extra_host }}"
{% endif %}
        tty: true
        volumes:
            - filestore:/opt/odoo/data:z
{% if banking %}
            - ./bank/:/ofx/:ro
{% endif %}
{% if private_pull is defined %}
            - ../import/:/import/:ro
{% endif %}
        networks:
            default:
            inverseproxy_shared:
{% if restrict_internet_access %}
{% if whitelisted_urls is defined %}
            whitelists_proxy:
{% endif %}
{% if odoo_prod.extra_urls is defined %}
            extrawhitelists_proxy:
{% endif %}
{% endif %}
{% if mailname is defined %}
            email_proxy:
{% endif %}
        restart: unless-stopped
        labels:
            co.elastic.logs/multiline.pattern: '^[0-9]{2}'
            co.elastic.logs/multiline.negate: 'true'
            co.elastic.logs/multiline.match: "after"
            traefik.enable: "true"
{% if ansible_processor_vcpus > 2 or odoo_prod.force_odoo_workers is defined %}
            traefik.http.routers.odoo-longpolling.rule: "Host(`{{ odoo_prod.url }}`{% if odoo_prod.url2 is defined %}, `{{ odoo_prod.url2 }}`{% endif %}) && PathPrefix(`/longpolling/`)"
            traefik.http.routers.odoo-longpolling.service: "odoo-longpolling"
            traefik.http.services.odoo-longpolling.loadbalancer.server.port: "8072"
{% endif %}
            traefik.http.routers.odoo-restrict.middlewares: "auth@file"
            traefik.http.routers.odoo-restrict.rule: "Host(`{{ odoo_prod.url }}`{% if odoo_prod.url2 is defined %}, `{{ odoo_prod.url2 }}`{% endif %}) && Path(`/website/info`, `/web/database/{p:manager|create|duplicate|drop|backup|restore|change_password}`)"
            traefik.http.routers.odoo-restrict.service: "odoo"
            traefik.http.routers.odoo.rule: "Host(`{{ odoo_prod.url }}`{% if odoo_prod.url2 is defined %}, `{{ odoo_prod.url2 }}`{% endif %})"
            traefik.http.routers.odoo.service: "odoo"
            traefik.http.services.odoo.loadbalancer.server.port: "8069"

    db:
        image: postgres:{{ odoo_db_version }}-alpine
        container_name: odoo_db
        environment:
            POSTGRES_DB: "postgres"
            POSTGRES_USER: "{{ odoo_prod.db_user }}"
            POSTGRES_PASSWORD: "{{ odoo_prod.db_pass }}"
{% if postgres_options is defined %}
            PGOPTIONS: "{{ postgres_options }}"
{% endif %}
        labels:
            co.elastic.logs/module: postgresql
{% if odoo_remote_db_access %}
        networks:
            default:
            public:
        ports:
            - "15432:5432"
{% endif %}
        volumes:
            - db:/var/lib/postgresql/data:z
        restart: unless-stopped

    smtp:
{% if mailname is defined %}
        image: tecnativa/postfix-relay
        container_name: odoo_smtp
        networks:
            email_proxy:
        volumes:
            - smtp:/var/spool/postfix
        environment:
            MAILNAME: "{{ mailname }}"
            MAIL_RELAY_HOST: "{{ mailserver }}"
            MAIL_RELAY_PORT: "{{ smtpport }}"
            MAIL_RELAY_USER: "{{ smtpuser }}"
            MAIL_RELAY_PASS: "{{ smtppass }}"
            MAIL_CANONICAL_DOMAINS: "{{ mailname }}"
            MAIL_NON_CANONICAL_DEFAULT: "{{ mailname }}"
        restart: unless-stopped
{% if restrict_internet_access %}
{% if imap_mailserver is defined %}
    email_imap:
        image: tecnativa/whitelist
        container_name: odoo_imap
        labels:
            co.elastic.logs/enabled: "false"
        networks:
            email_proxy:
                aliases:
                    - "{{ imap_mailserver }}"
            email_public:
        environment:
            PORT: "443 993"
            TARGET: "{{ imap_mailserver }}"
            PRE_RESOLVE: 1
        restart: unless-stopped

{% endif %}
    email:
        image: tecnativa/whitelist
        container_name: odoo_email
        labels:
            co.elastic.logs/enabled: "false"
        networks:
            email_proxy:
                aliases:
                    - "{{ mailserver }}"
            email_public:
        environment:
            PORT: "443 {{ smtpport }} 993"
            TARGET: "{{ mailserver }}"
            PRE_RESOLVE: 1
        restart: unless-stopped
{% endif %}
{% else %}
        image: mailhog/mailhog
        container_name: odoo_smtp
        restart: unless-stopped
        labels:
            co.elastic.logs/enabled: "false"
{% endif %}
{% if restrict_internet_access and odoo_prod.extra_urls is defined %}
{% for server in odoo_prod.extra_urls %}

    {{ server.url }}:
        image: tecnativa/whitelist
        container_name: odoo_{{ server.url }}
        labels:
            co.elastic.logs/enabled: "false"
        networks:
            extrawhitelists_proxy:
                aliases:
                    - "{{ server.url }}"
            extrawhitelists_public:
        environment:
            PORT: "{{ server.port }}"
            TARGET: "{{ server.url }}"
            PRE_RESOLVE: 1
        restart: unless-stopped
{% endfor %}
{% endif %}
{% if metabase %}

    metabase:
        image: metabase/metabase
        container_name: odoo_metabase
        environment:
            MB_DB_FILE: "/metabase-data/metabase.db"
        networks:
            default:
            inverseproxy_bi:
        labels:
            co.elastic.logs/enabled: "false"
            traefik.docker.network: "inverseproxy_bi"
            traefik.enable: "true"
            traefik.http.middlewares.metabase-stripprefix.stripprefix.prefixes: "/metabase"
            traefik.http.routers.metabase.middlewares: "metabase-stripprefix"
            traefik.http.routers.metabase.rule: "Host(`{{ odoo_prod.url }}`) && PathPrefix(`/metabase`)"
            traefik.http.routers.metabase.service: "metabase"
            traefik.http.services.metabase.loadbalancer.server.port: "3000"
        restart: unless-stopped
        volumes:
            - metabase:/metabase-data:z
{% endif %}
{% if odoo_prod.extra_app is defined %}

    app:
        image: {{ odoo_prod.extra_app.image }}
        container_name: {{ odoo_prod.extra_app.name }}
        restart: unless-stopped
        networks:
            inverseproxy_app:
        labels:
            co.elastic.logs/enabled: "false"
            traefik.docker.network: "inverseproxy_app"
            traefik.enable: "true"
            traefik.http.routers.{{ odoo_prod.extra_app.name | lower | regex_replace('_','') }}.rule: "Host(`{{ odoo_prod.extra_app.url }}`)"
            traefik.http.routers.{{ odoo_prod.extra_app.name | lower | regex_replace('_','') }}.service: "{{ odoo_prod.extra_app.name | lower | regex_replace('_','') }}"
            traefik.http.services.{{ odoo_prod.extra_app.name | lower | regex_replace('_','') }}.loadbalancer.server.port: "80"
{% endif %}

networks:
    default:
        internal: true
        driver_opts:
            encrypted: 1
    inverseproxy_shared:
        external: true
{% if odoo_prod.extra_app is defined %}
    inverseproxy_app:
        external: true
{% endif %}
{% if metabase %}
    inverseproxy_bi:
        external: true
{% endif %}
{% if restrict_internet_access %}
{% if whitelisted_urls is defined %}
    whitelists_proxy:
        external: true
{% endif %}
{% if odoo_prod.extra_urls is defined %}
    extrawhitelists_proxy:
        driver_opts:
            encrypted: 1
        internal: true
    extrawhitelists_public:
        driver_opts:
            encrypted: 1
{% endif %}
{% endif %}
{% if mailname is defined %}
    email_proxy:
        driver_opts:
            encrypted: 1
{% if restrict_internet_access %}
        internal: true
    email_public:
        driver_opts:
            encrypted: 1
{% endif %}
{% endif %}
{% if odoo_remote_db_access %}
    public:
{% endif %}

volumes:
    filestore:
    db:
{% if mailname is defined %}
    smtp:
{% endif %}
{% if metabase %}
    metabase:
{% endif %}
